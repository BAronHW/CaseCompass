generator client {
  provider = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]

}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions = [vector]
}

model Document {
  id          Int           @id @default(autoincrement())
  key         String        @unique
  size        Int
  title       String? @default("")
  content     String? @default("")
  user        User          @relation(fields: [uid], references: [uid])
  uid         String
  accountTemplate accountTemplate[]
  documentComments documentComments[]
  documentChunks documentChunks[]
  tags tags[]
}

model tags {
  id Int @id @default(autoincrement())
  title String @default("")
  document Document @relation(fields: [documentId], references: [id])
  documentId Int @unique
}

model documentComments {
  id Int @id @default(autoincrement())
  title String @default("")
  content String @default("")
  document Document @relation(fields: [documentId], references: [id])
  documentId Int @unique
}

model accountTemplate {
  id Int @id @default(autoincrement())
  ownerId Int @unique
  owner User @relation(fields: [ownerId], references: [id])
  documents Document[]
}

model User {
  id      Int      @id @default(autoincrement())
  name    String?  @db.VarChar(255)
  email   String   @unique @db.VarChar(255)
  Document    Document[]
  uid String @unique @db.VarChar(255)
  password String 
  refreshToken String
  accountTemplate accountTemplate[]
  Chat Chat?
}

model documentChunks {
  id Int @id @default(autoincrement())
  embeddings Unsupported("vector(768)")?
  content String @default("")
  document Document @relation(fields: [documentId], references: [id])
  documentId Int
}

model Chat {
  id Int @id @default(autoincrement())
  user User @relation(fields: [userId], references: [id])
  userId Int @unique
  message Message[] 

}

model Message {
  id Int @id @default(autoincrement())
  chat Chat @relation(fields: [chatId], references: [id], onDelete: Cascade)
  chatId Int @unique
  body String @default("")
  timestamp DateTime @default(now())
  isHuman Boolean @default(true)
}
