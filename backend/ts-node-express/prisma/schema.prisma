generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [vector]
}

model Document {
  id               Int               @id @default(autoincrement())
  key              String            @unique
  size             Int
  uid              String
  content          String?           @default("")
  title            String?           @default("")
  url              String            @default("")
  user             User              @relation(fields: [uid], references: [uid])
  documentChunks   documentChunks[]
  documentComments documentComments?
  accountTemplate  accountTemplate[] @relation("DocumentToaccountTemplate")
}

model documentComments {
  id         Int      @id @default(autoincrement())
  title      String   @default("")
  content    String   @default("")
  documentId Int      @unique
  Document   Document @relation(fields: [documentId], references: [id])
}

model accountTemplate {
  id       Int        @id @default(autoincrement())
  ownerId  Int        @unique
  owner    User       @relation(fields: [ownerId], references: [id])
  Document Document[] @relation("DocumentToaccountTemplate")
}

model User {
  id              Int              @id @default(autoincrement())
  name            String?          @db.VarChar(255)
  email           String           @unique @db.VarChar(255)
  uid             String           @unique @db.VarChar(255)
  password        String
  refreshToken    String
  Chat            Chat?
  Document        Document[]
  accountTemplate accountTemplate?
}

model documentChunks {
  id         Int                    @id @default(autoincrement())
  embeddings Unsupported("vector")?
  documentId Int
  content    String                 @default("")
  Document   Document               @relation(fields: [documentId], references: [id])
}

model Chat {
  id      Int       @id @default(autoincrement())
  userId  Int       @unique
  user    User      @relation(fields: [userId], references: [id])
  message Message[]
}

model Message {
  id        Int      @id @default(autoincrement())
  chatId    Int
  body      String   @default("")
  timestamp DateTime @default(now())
  isHuman   Boolean  @default(true)
  metaData  Json?
  role      String
  chat      Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)
}

// model Tags {
//   id Int @id @default(autoincrement())
//   body String @default("")
//   documentId Int
//   document Document @relation(fields: [documentId], references: [id])
// }
